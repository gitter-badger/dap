Первая <a href="https://habr.com/ru/post/478330/">статья</a> про <a href="https://dap.js.org">dap</a>, очевидно, не стала моим писательским успехом: подавляющее большинство коментов к ней свелись к "ниасилил" и "ниасилил, но осуждаю". А приз за <s>самый</s> единственный конструктивный комментарий верхнего уровня достается @OldVitus, за совет продемонстрировать dap на примере TodoMVC, чтобы было с чем сравнить.

<a href="http://todomvc.com/">TodoMVC</a>, если кто не знает, это такой стандартный UI-хелловорлд, позволяющий сравнить решения одной и той же задачи - условного "Списка дел" - средствами разных фреймворков. Задачка, при всей своей простоте (ее <a href="https://dap.js.org/samples/todo.html">решение на dap</a> влезает "в один экран"), весьма иллюстративна. Поэтому в этой статье я попробую показать, как типичные для веб-фронтенда задачи реализуются с помощью dap.

Искать и изучать формальное описание задачи я не стал, а решил просто среверсить один из примеров. Бэкенд в рамках этой статьи нам не интересен, поэтому сами мы его писать не будем, а воспользуемся <a href="https://todo-backend-express.herokuapp.com/">одним из готовых</a> с сайта https://www.todobackend.com/, оттуда же возьмем и <a href="https://www.todobackend.com/client/index.html?https://todo-backend-express.herokuapp.com/">пример клиента</a> и стандартный <a href="https://www.todobackend.com/client/css/vendor/todomvc-common.css">CSS-файл</a>.

Для использования dap вам не нужно ничего скачивать и устанавливать. Никаких <code>npm install</code> и вот этого всего. Не требуется создавать никаких проектов с определенной структурой каталогов, манифестами и прочей атрибутикой IT-успеха. Достаточно текcтового редактора и браузера. Для отладки XHR-запросов может еще потребоваться веб-сервер - достаточно простейшего, типа вот этого <a href="https://chrome.google.com/webstore/detail/web-server-for-chrome/ofhbbkphhbklhfoeikjpcbhemlocgigb">расширения</a> для Chrome. Весь наш фронтенд будет состоять из одного-единственного .html-файла (разумеется, ссылающегося на скрипт dap-движка и на стандартный CSS-файл TodoMVC)

Итак, с чистого листа.

<h2>1. Создаем .html файл</h2>

<source lang="html">
<!DOCTYPE html>
<html>
<head>
	<meta charset="utf-8">
	<title>Todo -- dap sample</title>
	<link rel="stylesheet" href="https://www.todobackend.com/client/css/vendor/todomvc-common.css"/>
	<script src="https://dap.js.org/0.4.js"></script>
</head>

<body>
<script>
// здесь будет dap
</script>
</body>

</html>
</source>

Обычная html-заготовка, в которой подключаем CSS-файл, любезно предоставляемый сайтом https://www.todobackend.com/ и dap-движок, не менее любезно предоставляемый сайтом https://dap.js.org/


<h2>2. Копируем DOM-структуру оригинального примера</h2>
Чтобы пользоваться стандартным CSS-файлом без переделок, будем придерживаться той же DOM-структуры, что и <a href="https://www.todobackend.com/client/index.html?https://todo-backend-express.herokuapp.com/">оригинальный пример</a>. Открываем его в браузере Chrome, жмем Ctr+Shift+I, выбираем вкладку Elements и видим, что собственно приложение находится в элементе <code>section id="todo-app"></code>

<img src="https://habrastorage.org/webt/3d/ks/mq/3dksmqoxzyif_tgnxfc3v-wf_us.png" />

Последовательно раскрывая это поддерево, переписываем его структуру в наш .html файл. Сейчас мы просто срисовываем по-быстренькому, а не пишем код, поэтому просто пишем сигнатуры элементов в 'одинарных кавычках', а в скобках их детей. Если детей нет - рисуем пустые скобочки. Следим за индентами и балансом скобок.

<source lang="javascript">
// здесь будет dap

'#todoapp'(
	'#header'(
		'H1'()
		'INPUT#new-todo placeholder="What needs to be done?" autofocus'()
	)
	'#main'(
		'#toggle-all type=checkbox'()
		'UL#todo-list'(
			'LI'(
				'INPUT.toggle type=checkbox'()
				'LABEL'()
				'BUTTON.destroy'()
			)
		)
	)
	'#footer'(
		'#todo-count'()
		'UL#filters'(
			'LI'()
		)
		'#clear-completed'()
	)
)
</source>

Oбратите внимание: повторяющиеся элементы (например, здесь это элементы <code>LI</code>) мы пишем в структуру по одному разу, даже если в оригинале их несколько; очевидно, что это массивы из одного и того же шаблона. 

Формат сигнатур, думаю, понятен любому, кто писал руками HTML и CSS, поэтому останавливаться на нем подробно пока не буду. Скажу лишь, что теги пишутся ЗАГЛАВНЫМИ буквами, а отсутствие тега равносильно наличию тега DIV. Обилие здесь #-элементов (имеющих id) обусловлено спецификой подключаемого CSS-файла, в котором используются в основном как раз id-селекторы.

<h2>3. Вспоминаем, что dap-программа - это Javascript</h2>
Чтобы избавить нас от лишних скобочек в коде, dap-движок внедряет прямо в <code>String.prototype</code> несколько методов (я в курсе, что внедрять свои методы в стандартные объекты - это айяйяй, но... короче, проехали), которые преобразует строку-сигнатуру в dap-шаблон. Один из таких методов - <code>.d(rule, ...children)</code>. Первым аргументом он принимает правило генерации (<i>d-правило</d>), и остальными аргументами - произвольное число чайлдов.

Исходя из этого нового знания, дописываем наш код так, чтобы вместо каждой открывающей скобки у нас была последовательность <code>.d(""</code>, а перед каждой открывающей одинарной кавычкой, кроме самой первой, была запятая. Лайфхак: можно воспользоваться автозаменой.

<source lang="javascript">
'#todoapp'.d(""
	,'#header'.d(""
		,'H1'.d("")
		,'INPUT#new-todo placeholder="What needs to be done?" autofocus'.d("")
	)
	,'#main'.d(""
		,'#toggle-all type=checkbox'.d("")
		,'UL#todo-list'.d(""
			,'LI'.d(""
				,'INPUT.toggle type=checkbox'.d("")
				,'LABEL'.d("")
				,'BUTTON.destroy'.d("")
			)
		)
	)
	,'#footer'.d(""
		,'#todo-count'.d("")
		,'UL#filters'.d(""
			,'LI'.d("")
		)
		,'#clear-completed'.d("")
	)
)
</source>

Вуаля! Мы получили дерево вызовов метода <code>.d</code>, которое уже готово трансформироваться в dap-шаблон. Пустые строки <code>""</code> - это зародыши будущих d-правил, а чайлды стали перечисленными через запятую аргументами. Формально, это уже валидная dap-программа, хоть пока и не совсем с тем выхлопом, который нам нужен. Но ее уже можно запустить! Для этого после закрывающей корневой скобки дописываем метод <code>.RENDER()</code>. Этот метод, как понятно из его названия, рендерит полученный шаблон.

Итак, на данном этапе имеем .html-файл вот с таким содержанием:

<source lang="javascript">
<!DOCTYPE html>
<html>
  <head>
	<meta charset="utf-8">
	<title>Todo -- dap sample</title>
	<link rel="stylesheet" href="https://www.todobackend.com/client/css/vendor/todomvc-common.css"/>
	<script src="https://dap.js.org/0.4.js"></script>
  </head>

  <body>
    <script>

'#todoapp'.d(""
	,'#header'.d(""
		,'H1'.d("")
		,'INPUT#new-todo placeholder="What needs to be done?" autofocus'.d("")
	)
	,'#main'.d(""
		,'#toggle-all type=checkbox'.d("")
		,'UL#todo-list'.d(""
			,'LI'.d(""
				,'INPUT.toggle type=checkbox'.d("")
				,'LABEL'.d("")
				,'BUTTON.destroy'.d("")
			)
		)
	)
	,'#footer'.d(""
		,'#todo-count'.d("")
		,'UL#filters'.d(""
			,'LI'.d("")
		)
		,'#clear-completed'.d("")
	)
)

.RENDER() // рендерим полученный dap в документ

    </script>
  </body>
</html>
</source>

Можно <a href="http://dap.js.org/samples/tutorial/3.html">открыть его в браузере</a>, чтобы убедиться, что DOM-элементы генерятся, CSS-стили применяются, осталось только наполнить этот шаблон данными.

<h2>4. Получаем данные</h2>
Идем на <a href="https://www.todobackend.com/client/index.html?https://todo-backend-express.herokuapp.com/">страничку-оригинал</a>, открываем в инструментах вкладку Network, включаем фильтр XHR, и смотрим, откуда берутся данные, и в каком виде.

<img src="https://habrastorage.org/webt/vf/ff/4l/vfff4lreh7nhj6jpgb8re83wb-s.png" />

<img src="https://habrastorage.org/webt/qi/lh/ga/qilhganpuhmmtevpnyuytm1uadu.png" />

Окей, понятненько. Список дел берется прямо из https://todo-backend-express.herokuapp.com/ в виде json-массива объектов. Замечательно.

Для получения данных в dap имеется встроенный конвертор <code>:query</code> который асинхронно "конвертирует" URL в данные, с него полученные. Сам URL мы не будем писать прямо в правиле, а обозначим его константой <code>todos</code>; тогда вся конструкция по добыче данных будет выглядеть так:

<source lang="javascript">
todos:query
</source>

а саму константу <code>todos</code> пропишем словаре - в секции <code>.DICT</code>, прямо перед <code>.RENDER()</code>:

<source lang="javascript">
'#todoapp'.d(""
	...
)
.DICT({
	todos	: "https://todo-backend-express.herokuapp.com/"
})
.RENDER()
</source>

Получив массив <code>todos</code>, строим из него список дел: для каждого дела берем название из поля <code>.title</code> и пишем его в элемент <code>LABEL</code>, а из поля <code>.completed</code> берем признак "завершенности" - и пишем в свойство <code>checked</code> элемента-чекбокса <code>INPUT.toggle</code>. Делается это так:

<source lang="javascript">
		,'UL#todo-list'.d("*@ todos:query"
		// Оператор * выполняет повтор для всех элементов массива
			,'LI'.d(""
				,'INPUT.toggle type=checkbox'.d("#.checked=.completed")
				// # обозначает "этот элемент"
				,'LABEL'.d("! .title")
				// Оператор ! просто добавляет текст в элемент
				,'BUTTON.destroy'.d("")
			)
		)
</source>

Обновляем эту нашу страничку в браузере и... если вы запускаете ее из файловой системы, то ничего не происходит. Проблема в том, что современные браузеры не разрешают кросс-доменные XHR-запросы из локальных документов.

<img src="https://habrastorage.org/webt/tm/fy/bi/tmfybiqw7s2geblqodepfg7k7lk.png" />

Пришло время смотреть нашу страничку через http - с помощью любого локального вебсервера. Ну, или если вы пока не готовы писать dap своими руками, смотрите последовательные версии странички по моим ссылкам (не забывайте смотреть исходники - в Хроме это делается с помощью Ctrl+U)

Итак, <a href="http://dap.js.org/samples/tutorial/4.html">заходим на нашу страничку по http://</a> и видим, что данные приходят, список строится. Отлично! Вы уже освоили операторы <code>*</code> и <code>!</code>, конвертор <code>:query</code>, константы и доступ к полям текущего элемента массива. Посмотрите еще раз на получающийся код. Он вам все еще кажется нечитаемым?

<h2>5. Добавляем состояние</h2>
Возможно, вы уже попробовали понажимать на галочки в списке дел. Сами галочки меняют цвет, но, в отличие от оригинала, родительский элемент <code>LI</code> не меняет свой стиль ("завершенное дело" должно становиться серым и зачеркнутым, но этого не происходит) - дела не меняют свое <i>состояние</i>. А никакого состояния эти элементы пока и не имеют и, соответственно, не могут его менять. Сейчас мы это поправим.

Добавим элементу <code>LI</code> состояние "завершенности". Для этого определим в его d-правиле <i>переменную состояния</i> <code>$completed</code>. Элементу <code>INPUT.toggle</code>, который может это состояние менять, назначим соответствующее правило реакции (<i>ui-правило</i>), которое будет устанавливать переменную <code>$completed</code> в соответствии с собственным признаком <code>checked</code> ("галка включена"). В зависимости от состояния <code>$completed</code> элементу <code>LI</code> будем либо включать, либо выключать CSS-класс "completed".

<source lang="javascript">
		,'UL#todo-list'.d("*@ todos:query"
			,'LI'.d("$completed=.completed"
			// Переменная состояния, инициализируем из одноименного поля .completed
				,'INPUT.toggle type=checkbox'
					.d("#.checked=.completed")
					// Начальное состояние галочки берем из данных
					.ui("$completed=#.checked")
					// при нажатии обновляем переменную состояния $completed
				,'LABEL'.d("! .title")
				,'BUTTON.destroy'.d("")
			).a("!? $completed")
			// включаем или выключаем css-класс completed
			// в зависимости от значения $completed
		)
</source>

Подобные манипуляции с CSS-классами - вещь довольно частая, поэтому для них в dap имеется специальный оператор <code>!?</code>
Обратите внимание, делаем мы это в <i>а-правиле</i> (от слова accumulate). Почему не в d-правиле? Отличие между этими двумя типами правил в том, что d-правило при обновлении полностью перестраивает содержимое элемента, удаляя старое и генеря все заново, тогда как a-правило не трогает имеющееся содержимое элемента, а "дописывает" результат к тому, что уже есть. Смена отдельного атрибута элемента <code>LI</code> не требует перестройки остального его содержимого, поэтому рациональней это делать именно в a-правиле.

Смотрим на <a href="http://dap.js.org/samples/tutorial/5-1.html">результат</a>. Уже лучше: нажатия на галочки меняют состояние соответствующего элемента списка дел, и в соответствии с этим состоянием меняется и визуальный стиль элемента. Но все еще есть проблема: если в списке изначально присутствовали завершенные дела - они не будут серенькими, т. к. по умолчанию a-правило не исполняется при генерации элемента. Чтобы исполнить его и при генерации, допишем в d-правило элемента <code>LI</code> оператор <code>a!</code>

<source lang="javascript">
			,'LI'.d("$completed=.completed; a!"
			// Сразу же после инициализации переменной $completed
			// используем ее в a-правиле
</source>

<a href="http://dap.js.org/samples/tutorial/5-2.html">Смотрим</a>. Окей. С состоянием <code>$completed</code> разобрались. Завершенные дела стилизуются корректно и при начальной загрузке, и при последующих ручных переключениях.

<h2>6. Редактирование названий дел</h2>
Вернемся к оригиналу. При двойном клике по названию дела включается режим редактирования, в котором это название можно поменять. Там это реализовано так, что шаблон режима просмотра "view" (с галкой, названием и кнопкой удаления) целиком прячется, а показывается элемент <code>INPUT class="edit"</code>. Мы сделаем чуть иначе - прятать будем только элемент <code>LABEL</code>, т. к. остальные два элемента нам при редактировании не мешают. Просто допишем класс <code>view</code> элементу <code>LABEL</code>

Для состояния "редактирование" определим в элементе <code>LI</code> переменную <code>$editing</code>. Изначально оно (состояние) сброшено, включается по <code>dblclick</code> на элементе <code>LABEL</code>, а выключается при расфокусе элемента <code>INPUT.edit</code>. Так и запишем:

<source lang="javascript">
			,'LI'.d("$completed=.completed $editing=; a!" // Теперь у нас здесь две переменные состояния
				,'INPUT.toggle type=checkbox'
					.d("#.checked=.completed")
					.ui("$completed=#.checked")
				,'LABEL.view'
					.d("? $editing:!; ! .title") // Если $editing сброшена, то показываем этот элемент
					.e("dblclick","$editing=`yes") // По dblclick установить $editing в непустое состояние
				,'INPUT.edit'
					.d("? $editing; !! .title@value") // Этот элемент показываем если $editing не пустое
					.ui(".title=#.value") // обновляем .title по событию change (ui событие по умолчанию для INPUT)
					.e("blur","$editing=") // сбрасываем $editing по событию blur
				,'BUTTON.destroy'.d("")
			).a("!? $completed $editing") // отражаем состояния $completed и $editing в css-классе элемента 'LI'
</source>

Теперь мы <a href="http://dap.js.org/samples/tutorial/6.html">можем</a> редактировать названия дел.

<h2>7. Отправка данных на сервер</h2>
Ок, в браузере мы дела редактировать уже можем, но эти изменения нужно еще и передавать на сервер. Смотрим, как это делает оригинал:

<img src="https://habrastorage.org/webt/jd/r5/bw/jdr5bwsa8yi7wu4sbwxqr3bwcdi.png" />

Внесенные изменения отправляются на сервер методом PATCH с неким URL вида <code>http://todo-backend-express.herokuapp.com/28185</code>, который, очевидно, является уникальным для каждого дела. Этот URL указывается сервером в поле <code>.url</code> для каждого дела, присутствующего в списке. То есть все, что от нас требуется для обновления дела на сервере - это отправить PATCH-запрос по адресу, указанному в поле <code>.url</code>, с измененными данными в формате JSON:

<source lang="javascript">
				,'INPUT.edit'
					.d("? $editing; !! .title@value")
					.ui(".title=#.value; (@method`PATCH .url (@Content-type`application/json)@headers (.title):json.encode@body):query") // Уведомляем сервер
					.e("blur","$editing=") 
</source>

Здесь мы используем все тот же конвертор <code>:query</code>, но в более развернутом варианте. Когда <code>:query</code> применяется к простой строке, эта строка трактуется как URL и выполняется GET-запрос. Если же <code>:query</code> получает сложный объект, как в данном случае, он трактует его как детальное описание запроса, содержащее поля <code>.method</code>, <code>.url</code>, <code>.headers</code> и <code>.body</code>, и выполняет запрос в соответствии с ними. Здесь мы сразу после обновления <code>.title</code> отправляем серверу PATCH-запрос c этим обновленным <code>.title</code>

Но есть нюанс. Поле <code>.url</code> мы получаем от сервера, оно выглядит примерно так: <code>http://todo-backend-express.herokuapp.com/28185</code>, то есть в нем жестко прописан протокол http:// Если наш клиент тоже открыт по http://, то все нормально. Но если клиент открыт по https:// - то возникает проблема: по соображениям безопасности браузер блокирует http-трафик от https-источника.
Решается это просто: если убрать из <code>.url</code> протокол, то запрос будет проходить по протоколу страницы. Так и сделаем: напишем соответствующий конвертер - <code>dehttp</code>, и будем пропускать <code>.url</code> через него. Собственные конверторы (и прочий функционал) прописывается в секции <code>.FUNC</code>:

<source lang="javascript">
					.ui(".title=#.value; (@method`PATCH .url:dehttp (@Content-type`application/json)@headers (.title):json.encode@body):query")
...
.FUNC({
	convert:{ // конверторы - это функции с одним входом и одним выходом
		dehhtp: url=>url.replace(/^https?\:/,'') // удаляем протокол из URL
	}
})
</source>

Еще имеет смысл вынести объект headers в словарь, чтобы использовать его и в других запросах:

<source lang="javascript">
					.ui(".title=#.value; (@method`PATCH .url:dehttp headers (.title):json.encode@body):query")
...
.DICT({
	todos	: "//todo-backend-express.herokuapp.com/",
	headers: {"Content-type":"application/json"}
})
</source>

Ну и для полного фэншуя воспользуемся еще одним полезным свойством конвертора <code>:query</code> - автоматическим кодированием тела запроса в json в соответствии с заголовком <code>Content-type:application/json</code>. В итоге правило будет выглядеть так:

<source lang="javascript">
					.ui(".title=#.value; (@method`PATCH .url:dehttp headers (.title)):query")
</source>
					
Итак, <a href="http://dap.js.org/samples/tutorial/7-2.html">смотрим</a>. Окей, названия дел теперь меняются не только в браузере, но и на сервере. Но! Меняться-то может не только название дела, но и его состояние завершенности - <code>completed</code>. Значит, его тоже нужно отправлять серверу.
Можно элементу <code>INPUT.toggle</code> дописать аналогичный PATCH-запрос, просто вместо <code>(.title)</code> отправлять <code>(.completed)</code>:

<source lang="javascript">
				,'INPUT.toggle type=checkbox'
					.d("#.checked=.completed")
					.ui("$completed=#.checked; (@method`PATCH .url:dehttp headers (.completed:?)):query")
</source>

А можно вынести этот PATCH-запрос "за скобки": 

<source lang="javascript">
			,'LI'.d("$completed=.completed $editing= $patch=; a!"
			// Переменная $patch - посылка для сервера
				,'INPUT.toggle type=checkbox'
					.d("#.checked=.completed")
					.ui("$patch=($completed=#.checked)")
					// кладем в $patch измененный completed
				,'LABEL.view'
					.d("? $editing:!; ! .title")
					.e("dblclick","$editing=`yes")
				,'INPUT.edit'
					.d("? $editing; !! .title@value")
					.ui("$patch=(.title=#.value)")
					// кладем в $patch измененный title
					.e("blur","$editing=")
				,'BUTTON.destroy'.d("")
			)
			.a("!? $completed $editing")
			.u("? $patch; (@method`PATCH .url:dehttp headers $patch@):query $patch=")
			// если $patch не пустой, отправляем его серверу, потом сбрасываем
</source>
			
Тут дело вот в чем. Правила реакции относятся к группе "up-правил", которые исполняются "снизу вверх" - от потомка к родителю, до самого корня (эта последовательность может быть прервана при необходимости). Это чем-то похоже на "всплывающие" события в DOM. Поэтому какие-то фрагменты реакции, общие для нескольких потомков, можно поручить их общему предку.
Конкретно в нашем случае выигрыш от такого делегирования не особо заметный, но если бы редактируемых полей было больше, то вынос этого громоздкого (по меркам dap, конечно) запроса в одно общее правило сильно помог бы сохранять код простым и читабельным. Так что рекомендую.

<a href="http://dap.js.org/samples/tutorial/7-3.html">Смотрим</a>: Теперь на сервер отправляются и изменения названия, и изменения статуса.


В следующей статье, если будет интерес, рассмотрим добавление, удаление и фильтрацию дел. А пока можно еще раз посмотреть примеры на https://dap.js.org/docs/
