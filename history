Dap - reactive superscript language
 
Хочу рассказать про dap — интересный и необычный язык для написания реактивных страничек.

Для затравки простая задачка: взять список неких сказочных персонажей по адресу https://dap.js.org/samples/heroes.json и вывести их имена обычным html-списком; при нажатии на имя героя — писать его id в консоль. 

Это, конечно, легко делается и на React, и на Angular, и на Vue. Вопрос: НАСКОЛЬКО легко? В dap это делается так:

<code>
'UL'.d("* :query`https://dap.js.org/samples/heroes.json"
	,'LI'.d("! .name").ui("log .id")
)
</code>

Это первая пришедшая в голову тривиальная задачка и тривиальный же способ ее решения. На dap удобно писать "в лоб", не городя огород из  классов, компонентов и прочего ритуального реквизита. Что вижу, то пою. Но "пою" не на javascript или его производных, а на языке dap-правил, специально заточенном на простое и лаконичное описание реактивных зависимостей между элементами.

В примере выше, правда, никаких реактивных зависимостей пока нет, зато есть:

оператор * для итерации по данным,
конвертер :query для "конвертации" урла в полученные с него данные,
оператор ! для "печати" в генерируемый элемент,
оператор log для вывода в консоль.

Чуть усложним задачку, добавив зависимостей: пусть при нажатии на героя его id и name отображаются крупненько в элементе H2, а под ним пусть будет TEXTAREA с некой инфой по данному герою, которая берется с сервера по урлу https://dap.js.org/samples/hero-info.php?id=<id выбранного героя>. И чтобы эту инфу можно было править и отправлять обратно на сервер. Вот так вот сразу.

<code>
'heroes'.d("$hero="
	,'UL'.d("* :query`https://dap.js.org/samples/heroes.json"
		,'LI'.d("! .name").ui("$hero=$")
	)
	,'H2'.d("! $hero.id `: $hero.name")
	,'TEXTAREA'
		.d("! (`https://dap.js.org/samples/hero-info.php? $hero.id)uri:query")
		.ui("? (`https://dap.js.org/samples/hero-info.php? $hero.id #:value@info):post (`Failed)alert; (`Saved!)alert")
)
</code>

Здесь уже имеем зависимость содержимого элементов H2 и TEXTAREA от того, какой герой выбран. Герой, таким образом, оказывается переменной состояния. Такие переменные в dap-правилах обозначаются префиксом $ (как s в "state"). При нажатии на любой из элементов LI меняется содержимое переменной $hero, на что элементы H2 и TEXTAREA автоматически реагируют и обновляются.

Каким образом H2 и TEXTAREA узнают, что пора обновиться? Очень просто: в их правилах генерации присутствует обращение к переменной $hero.
Правила генерации — те, которые указываются с помощью метода .d — исполняются на фазе построения элемента. Еще в примерах можно заметить правила реакции, задаваемые методом .ui — они исполняются при взаимодействии пользователя с элементом. Это два самых часто используемых типа правил, кроме них есть еще несколько типов, о них поговорим позже.

Кстати: а вы уже заметили, что примеры вообще-то написаны на обычном javascript, а сами dap-правила это просто строки?

Синтаксис dap-правил довольно специфичен. Он не имеет ничего общего с привычным всем C-подобным синтаксисом, поэтому поначалу может казаться непонятным. Но на самом деле он исключительно прост и, не побоюсь этого слова, прекрасен. 






Отличительная особенность dap на фоне мейнстримовых реактивных движков — прямота
Если присмотреться, то можно увидеть, что это 




Зачем dap? Ведь есть React, Angular, Vue... тысячи их




Когда я впервые столкнулся с задачей написать более-менее интерактивное веб-приложение с обилием данных, на дворе стоял 2008-й год, никаких реактов и ангуляров еще не было, жив был еще IE6, в вебе царил б-г-мерзкий jQuery и данные было модно передавать в формате XML. Открыв для себя Ajax, я решил, что генерить странички на сервере это лоховство, и бросился сочинять браузерный шаблонизатор.
Самый первый вариант был чем-то вроде нынешнего Vue: атрибуты-директивы, {{выражения в скобочках}}, вот это все... Но без интерактива. 
Тупиковость такого подхода стала очевидна практически сразу же: атрибуты-директивы по факту ограничивают логику одним "вентилем" на элемент, что меня не устраивало. Зачем ограничиваться одной "директивой", если можно вписать целое "правило"?   


Подробней с dap можно ознакомиться на страничке проекта, 

